// <auto-generated />
using System;
using EduQuiz_5P.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduQuiz_5P.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240114161342_UserRegistration")]
    partial class UserRegistration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EduQuiz_5P.Data.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        });
                });

            modelBuilder.Entity("EduQuiz_5P.Data.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<double>("Point")
                        .HasColumnType("float");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b19f1b24-5ac9-4c8d-9b7c-5e5d5f5cfb1e",
                            Email = "admin@tiemkiet.vn",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            Gender = 0,
                            LockoutEnabled = true,
                            NormalizedEmail = "admin@tiemkiet.vn",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAECAsUeOByw0jsD4x7X0K9WQdxWV/RrvPBnHITnRzdbrhHKzmf35BZDPXJBcVjp5FIQ==",
                            PhoneNumber = "0923425148",
                            PhoneNumberConfirmed = true,
                            Point = 0.0,
                            SecurityStamp = "ZD5UZJQK6Q5W6N7O6RBRF6DB2Q2G2AIJ",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnswerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserIdRemove");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ChapterDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChapterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClassesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("SubjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UrlBackground")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRemoveId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClassesId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserIdUpdate");

                    b.HasIndex("UserRemoveId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Classes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserIdRemove");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AdvancedApplication")
                        .HasColumnType("float");

                    b.Property<double>("Application")
                        .HasColumnType("float");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamTime")
                        .HasColumnType("int");

                    b.Property<int>("ExamType")
                        .HasColumnType("int");

                    b.Property<double>("Identification")
                        .HasColumnType("float");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TotalUserExam")
                        .HasColumnType("int");

                    b.Property<double>("Understanding")
                        .HasColumnType("float");

                    b.Property<long?>("UserIdCreate")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserIdCreate");

                    b.HasIndex("UserIdRemove");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.ExamMatrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamMatrixDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExamMatrixName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRemoveId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserIdUpdate");

                    b.HasIndex("UserRemoveId");

                    b.ToTable("ExamMatrix");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.ExamMatrixDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("ChappterId")
                        .HasColumnType("int");

                    b.Property<int>("Component")
                        .HasColumnType("int");

                    b.Property<int>("ExamMatrixId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChappterId");

                    b.HasIndex("ExamMatrixId");

                    b.ToTable("ExamMatrixDetail");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ChappterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("IsImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsImageSolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("LevelType")
                        .HasColumnType("int");

                    b.Property<int>("NumberCorrect")
                        .HasColumnType("int");

                    b.Property<int>("NumberTimes")
                        .HasColumnType("int");

                    b.Property<string>("QuestionHints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionSolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChappterId");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserIdRemove");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlBackground")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserIdRemove");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.UserExamDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectAnswerId")
                        .HasColumnType("int");

                    b.Property<int>("UserExamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectAnswerId");

                    b.HasIndex("UserExamId");

                    b.ToTable("UserExamDetail");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.UserExams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AdvancedApplication")
                        .HasColumnType("float");

                    b.Property<double>("Application")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamTime")
                        .HasColumnType("int");

                    b.Property<double>("Identification")
                        .HasColumnType("float");

                    b.Property<int>("NumberOfCorrect")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestion")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Understanding")
                        .HasColumnType("float");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserExams");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.UserRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRegistration");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Answer", b =>
                {
                    b.HasOne("EduQuiz_5P.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("Question");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Chapter", b =>
                {
                    b.HasOne("EduQuiz_5P.Models.Classes", "Classes")
                        .WithMany("Chapter")
                        .HasForeignKey("ClassesId");

                    b.HasOne("EduQuiz_5P.Models.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserRemoveId");

                    b.Navigation("Classes");

                    b.Navigation("Subject");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Classes", b =>
                {
                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Exam", b =>
                {
                    b.HasOne("EduQuiz_5P.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId");

                    b.HasOne("EduQuiz_5P.Models.Classes", "Classes")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("EduQuiz_5P.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserIdCreate");

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.Navigation("Chapter");

                    b.Navigation("Classes");

                    b.Navigation("Subject");

                    b.Navigation("UserCreate");

                    b.Navigation("UserRemove");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.ExamMatrix", b =>
                {
                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserRemoveId");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.ExamMatrixDetail", b =>
                {
                    b.HasOne("EduQuiz_5P.Models.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChappterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuiz_5P.Models.ExamMatrix", "ExamMatrix")
                        .WithMany("ExamMatrixDetail")
                        .HasForeignKey("ExamMatrixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("ExamMatrix");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Question", b =>
                {
                    b.HasOne("EduQuiz_5P.Models.Chapter", "Chappter")
                        .WithMany("Questions")
                        .HasForeignKey("ChappterId");

                    b.HasOne("EduQuiz_5P.Models.Exam", null)
                        .WithMany("Questions")
                        .HasForeignKey("ExamId");

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("Chappter");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Subject", b =>
                {
                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.UserExamDetail", b =>
                {
                    b.HasOne("EduQuiz_5P.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuiz_5P.Models.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("SelectAnswerId");

                    b.HasOne("EduQuiz_5P.Models.UserExams", "UserExam")
                        .WithMany("UserExamDetails")
                        .HasForeignKey("UserExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("UserExam");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.UserExams", b =>
                {
                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.UserRegistration", b =>
                {
                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("EduQuiz_5P.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("EduQuiz_5P.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("EduQuiz_5P.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Chapter", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Classes", b =>
                {
                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Exam", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.ExamMatrix", b =>
                {
                    b.Navigation("ExamMatrixDetail");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.Subject", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("EduQuiz_5P.Models.UserExams", b =>
                {
                    b.Navigation("UserExamDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
